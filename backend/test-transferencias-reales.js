const fs = require('fs');

// Cargar wallets de testnet
const walletsData = JSON.parse(fs.readFileSync('../testnet-wallets.json', 'utf8'));

console.log('üí∏ ===== PRUEBA DE TRANSFERENCIAS REALES - TESTNET =====\n');

// Funci√≥n principal para simular el flujo de pagos
async function simularFlujoPagos() {
    console.log('üîç Verificando configuraci√≥n de wallets...\n');
    
    // Mostrar wallets configuradas
    console.log('üí∞ WALLETS CONFIGURADAS:');
    console.log(`üë®‚Äçüåæ Agricultor (Tu Freighter): ${walletsData.user.publicKey}`);
    console.log(`üè≠ Ingenio: ${walletsData.ingenio.publicKey}`);
    console.log(`üè¶ Fondo de Ahorro: ${walletsData.fondoAhorro.publicKey}`);
    console.log(`ü§ñ Sistema: ${walletsData.system.publicKey}\n`);
    
    // Balances iniciales (todos tienen 10,000 XLM seg√∫n la configuraci√≥n)
    const balanceInicial = {
        user: 10000,
        ingenio: 10000,
        fondoAhorro: 10000,
        sistema: 10000
    };
    
    console.log('üí∞ BALANCES INICIALES (seg√∫n configuraci√≥n):');
    console.log(`üë®‚Äçüåæ Agricultor: ${balanceInicial.user.toLocaleString()} XLM`);
    console.log(`üè≠ Ingenio: ${balanceInicial.ingenio.toLocaleString()} XLM`);
    console.log(`üè¶ Fondo de Ahorro: ${balanceInicial.fondoAhorro.toLocaleString()} XLM`);
    console.log(`ü§ñ Sistema: ${balanceInicial.sistema.toLocaleString()} XLM`);
    console.log(`üìä TOTAL EN EL ECOSISTEMA: ${(balanceInicial.user + balanceInicial.ingenio + balanceInicial.fondoAhorro + balanceInicial.sistema).toLocaleString()} XLM\n`);
    
    // Simular datos de la venta
    const ventaSimulada = {
        tokensVendidos: 47,
        precioUnitarioMXN: 450,
        totalMXN: 47 * 450, // $21,150 MXN
        // Convertir a XLM para la simulaci√≥n (1 XLM ‚âà $9 MXN aproximadamente)
        totalXLM: Math.round((47 * 450) / 9), // ‚âà 2,350 XLM
        empresa: "EcoTech Solutions S.A. de C.V."
    };
    
    console.log('üõí SIMULACI√ìN DE VENTA:');
    console.log(`üè¢ Empresa: ${ventaSimulada.empresa}`);
    console.log(`ü™ô Tokens vendidos: ${ventaSimulada.tokensVendidos} tCANE`);
    console.log(`üí∞ Valor total: $${ventaSimulada.totalMXN.toLocaleString('es-MX')} MXN`);
    console.log(`‚ö° Equivalente en XLM (para prueba): ${ventaSimulada.totalXLM.toLocaleString()} XLM\n`);
    
    // Calcular distribuci√≥n
    const distribucion = {
        agricultor: Math.round(ventaSimulada.totalXLM * 0.80), // 80%
        ingenio: Math.round(ventaSimulada.totalXLM * 0.10),    // 10%
        fondoAhorro: Math.round(ventaSimulada.totalXLM * 0.10) // 10%
    };
    
    console.log('üìä DISTRIBUCI√ìN CALCULADA:');
    console.log(`üë®‚Äçüåæ Agricultor (80%): ${distribucion.agricultor.toLocaleString()} XLM`);
    console.log(`üè≠ Ingenio (10%): ${distribucion.ingenio.toLocaleString()} XLM`);
    console.log(`üè¶ Fondo de Ahorro (10%): ${distribucion.fondoAhorro.toLocaleString()} XLM\n`);
    
    // Verificar si el sistema tiene suficientes fondos para la distribuci√≥n
    const totalNecesario = distribucion.agricultor + distribucion.ingenio + distribucion.fondoAhorro;
    
    console.log('üîç VERIFICACI√ìN DE FONDOS:');
    console.log(`üí∞ Sistema tiene: ${balanceInicial.sistema.toLocaleString()} XLM`);
    console.log(`üìã Necesita distribuir: ${totalNecesario.toLocaleString()} XLM`);
    
    if (balanceInicial.sistema >= totalNecesario) {
        console.log('‚úÖ El sistema tiene fondos suficientes para la distribuci√≥n\n');
        
        console.log('üöÄ SIMULACI√ìN DE TRANSFERENCIAS:');
        console.log('(En un entorno real, aqu√≠ se ejecutar√≠an las transacciones de Stellar)\n');
        
        // Simular las transferencias
        console.log(`üì§ Transferencia 1: Sistema ‚Üí Agricultor`);
        console.log(`   De: ${walletsData.system.publicKey}`);
        console.log(`   A: ${walletsData.user.publicKey}`);
        console.log(`   Monto: ${distribucion.agricultor.toLocaleString()} XLM\n`);
        
        console.log(`üì§ Transferencia 2: Sistema ‚Üí Ingenio`);
        console.log(`   De: ${walletsData.system.publicKey}`);
        console.log(`   A: ${walletsData.ingenio.publicKey}`);
        console.log(`   Monto: ${distribucion.ingenio.toLocaleString()} XLM\n`);
        
        console.log(`üì§ Transferencia 3: Sistema ‚Üí Fondo de Ahorro`);
        console.log(`   De: ${walletsData.system.publicKey}`);
        console.log(`   A: ${walletsData.fondoAhorro.publicKey}`);
        console.log(`   Monto: ${distribucion.fondoAhorro.toLocaleString()} XLM\n`);
        
        // Calcular balances finales simulados
        const balancesFinalSimulados = {
            user: balanceInicial.user + distribucion.agricultor,
            ingenio: balanceInicial.ingenio + distribucion.ingenio,
            fondoAhorro: balanceInicial.fondoAhorro + distribucion.fondoAhorro,
            sistema: balanceInicial.sistema - totalNecesario
        };
        
        console.log('üìä BALANCES FINALES SIMULADOS:');
        console.log(`üë®‚Äçüåæ Agricultor: ${balancesFinalSimulados.user.toLocaleString()} XLM (+${distribucion.agricultor.toLocaleString()})`);
        console.log(`üè≠ Ingenio: ${balancesFinalSimulados.ingenio.toLocaleString()} XLM (+${distribucion.ingenio.toLocaleString()})`);
        console.log(`üè¶ Fondo de Ahorro: ${balancesFinalSimulados.fondoAhorro.toLocaleString()} XLM (+${distribucion.fondoAhorro.toLocaleString()})`);
        console.log(`ü§ñ Sistema: ${balancesFinalSimulados.sistema.toLocaleString()} XLM (-${totalNecesario.toLocaleString()})\n`);
        
        console.log('‚úÖ ¬°Simulaci√≥n de distribuci√≥n completada exitosamente!');
        
    } else {
        console.log('‚ö†Ô∏è  El sistema no tiene fondos suficientes para esta distribuci√≥n');
        console.log('üí° En un entorno real, se necesitar√≠a financiar el sistema primero\n');
    }
    
    console.log('üîó PR√ìXIMOS PASOS PARA IMPLEMENTACI√ìN REAL:');
    console.log('1. üîê Configurar claves privadas seguras para transacciones');
    console.log('2. üè¶ Implementar sistema de financiamiento del wallet sistema');
    console.log('3. ‚ö° Integrar Stellar SDK para transacciones reales');
    console.log('4. üîç A√±adir verificaci√≥n y confirmaci√≥n de transacciones');
    console.log('5. üìä Implementar logging y auditor√≠a de todas las operaciones\n');
    
    console.log('üå± El flujo est√° listo para implementaci√≥n con Freighter y Stellar!');
    
    // Mostrar comandos √∫tiles
    console.log('\nüõ†Ô∏è  COMANDOS √öTILES PARA PRUEBAS:');
    console.log('‚Ä¢ Verificar balances: node check-balances.js');
    console.log('‚Ä¢ Flujo completo: node test-flujo-completo.js');
    console.log('‚Ä¢ Transferencias: node test-transferencias-reales.js');
    console.log('\nüåê ENLACES √öTILES:');
    console.log('‚Ä¢ Stellar Laboratory: https://laboratory.stellar.org/');
    console.log('‚Ä¢ Horizon Testnet: https://horizon-testnet.stellar.org/');
    console.log('‚Ä¢ Freighter Wallet: https://freighter.app/');
}

// Ejecutar la simulaci√≥n
simularFlujoPagos().catch(console.error);