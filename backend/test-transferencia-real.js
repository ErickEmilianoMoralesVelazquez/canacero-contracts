const fs = require('fs');

// Cargar wallets de testnet
const walletsData = JSON.parse(fs.readFileSync('../testnet-wallets.json', 'utf8'));

console.log('üöÄ ===== TRANSFERENCIA REAL EN TESTNET =====\n');

async function ejecutarTransferenciaReal() {
    console.log('üìã PREPARACI√ìN PARA TRANSFERENCIA REAL\n');
    
    // Mostrar informaci√≥n de las wallets
    console.log('üí∞ WALLETS DISPONIBLES:');
    console.log(`üë®‚Äçüåæ Tu Freighter: ${walletsData.user.publicKey}`);
    console.log(`üè≠ Ingenio: ${walletsData.ingenio.publicKey}`);
    console.log(`üè¶ Fondo de Ahorro: ${walletsData.fondoAhorro.publicKey}`);
    console.log(`ü§ñ Sistema: ${walletsData.system.publicKey}\n`);
    
    // Transferencia simulada que haremos
    const transferencia = {
        de: 'Sistema',
        dePublicKey: walletsData.system.publicKey,
        deSecretKey: walletsData.system.secretKey,
        a: 'Tu Freighter (Agricultor)',
        aPublicKey: walletsData.user.publicKey,
        monto: '100', // 100 XLM
        concepto: 'Pago por 1 token tCANE vendido'
    };
    
    console.log('üì§ TRANSFERENCIA A EJECUTAR:');
    console.log(`De: ${transferencia.de}`);
    console.log(`A: ${transferencia.a}`);
    console.log(`Monto: ${transferencia.monto} XLM`);
    console.log(`Concepto: ${transferencia.concepto}\n`);
    
    console.log('üîß INSTRUCCIONES PARA VER LA TRANSFERENCIA:\n');
    
    console.log('1Ô∏è‚É£ PREPARAR FREIGHTER:');
    console.log('   ‚Ä¢ Abre Freighter en tu navegador');
    console.log('   ‚Ä¢ Aseg√∫rate de estar en TESTNET');
    console.log('   ‚Ä¢ Importa las wallets del sistema usando las secret keys\n');
    
    console.log('2Ô∏è‚É£ IMPORTAR WALLETS EN FREIGHTER:');
    console.log('   üè≠ INGENIO:');
    console.log(`   Secret Key: ${walletsData.ingenio.secretKey}`);
    console.log(`   Nombre sugerido: "Ingenio San Miguel"\n`);
    
    console.log('   üè¶ FONDO DE AHORRO:');
    console.log(`   Secret Key: ${walletsData.fondoAhorro.secretKey}`);
    console.log(`   Nombre sugerido: "Fondo de Ahorro"\n`);
    
    console.log('   ü§ñ SISTEMA:');
    console.log(`   Secret Key: ${walletsData.system.secretKey}`);
    console.log(`   Nombre sugerido: "Sistema Canacero"\n`);
    
    console.log('3Ô∏è‚É£ ABRIR EXPLORADORES (Opcional pero recomendado):');
    console.log('   ‚Ä¢ Stellar Expert para tu wallet:');
    console.log(`   https://stellar.expert/explorer/testnet/account/${walletsData.user.publicKey}\n`);
    console.log('   ‚Ä¢ Stellar Expert para wallet del sistema:');
    console.log(`   https://stellar.expert/explorer/testnet/account/${walletsData.system.publicKey}\n`);
    
    console.log('4Ô∏è‚É£ EJECUTAR TRANSFERENCIA REAL:');
    console.log('   ‚ö†Ô∏è  IMPORTANTE: Esta ser√° una transferencia REAL en testnet');
    console.log('   üì± La ver√°s aparecer inmediatamente en Freighter');
    console.log('   üîó Tambi√©n aparecer√° en los exploradores de blockchain\n');
    
    // Simular el comando que ejecutar√≠a la transferencia real
    console.log('üíª COMANDO PARA TRANSFERENCIA REAL:');
    console.log('   (Requiere stellar-sdk instalado y configurado)');
    console.log(`   
const StellarSdk = require('stellar-sdk');
const server = new StellarSdk.Server('https://horizon-testnet.stellar.org');

async function transferir() {
    const sourceKeypair = StellarSdk.Keypair.fromSecret('${walletsData.system.secretKey}');
    const destinationId = '${walletsData.user.publicKey}';
    
    const sourceAccount = await server.loadAccount(sourceKeypair.publicKey());
    
    const transaction = new StellarSdk.TransactionBuilder(sourceAccount, {
        fee: StellarSdk.BASE_FEE,
        networkPassphrase: StellarSdk.Networks.TESTNET,
    })
    .addOperation(StellarSdk.Operation.payment({
        destination: destinationId,
        asset: StellarSdk.Asset.native(),
        amount: '${transferencia.monto}',
    }))
    .addMemo(StellarSdk.Memo.text('${transferencia.concepto}'))
    .setTimeout(180)
    .build();
    
    transaction.sign(sourceKeypair);
    const result = await server.submitTransaction(transaction);
    console.log('‚úÖ Transferencia exitosa:', result.hash);
}
`);
    
    console.log('\nüéØ RESULTADO ESPERADO:');
    console.log('   ‚Ä¢ Tu wallet Freighter recibir√° +100 XLM');
    console.log('   ‚Ä¢ Wallet del sistema enviar√° -100 XLM');
    console.log('   ‚Ä¢ Ver√°s la transacci√≥n en el historial de ambas wallets');
    console.log('   ‚Ä¢ El memo dir√°: "Pago por 1 token tCANE vendido"\n');
    
    console.log('üîç C√ìMO VERIFICAR:');
    console.log('   1. En Freighter: Cambia entre las cuentas importadas');
    console.log('   2. En Stellar Expert: Refresh la p√°gina para ver nuevas transacciones');
    console.log('   3. En el explorador: Busca el hash de la transacci√≥n\n');
    
    console.log('‚ö° ¬øLISTO PARA EJECUTAR LA TRANSFERENCIA REAL?');
    console.log('   Si quieres proceder, necesito instalar stellar-sdk y ejecutar el c√≥digo real.');
    console.log('   ¬øTe parece bien que proceda con la transferencia de 100 XLM?\n');
    
    console.log('üõ†Ô∏è  COMANDOS ALTERNATIVOS:');
    console.log('   ‚Ä¢ Ver balances actuales: node check-balances.js');
    console.log('   ‚Ä¢ Simular flujo completo: node test-flujo-completo.js');
    console.log('   ‚Ä¢ Esta gu√≠a: node test-transferencia-real.js\n');
    
    console.log('üìû Si tienes alg√∫n problema importando las wallets, av√≠same!');
}

// Ejecutar la gu√≠a
ejecutarTransferenciaReal().catch(console.error);